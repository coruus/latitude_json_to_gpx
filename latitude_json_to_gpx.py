from __future__ import print_function

import argparse
from datetime import datetime
import json

from gpxpy.gpx import GPX, GPXTrack, GPXTrackSegment, GPXTrackPoint


parser = argparse.ArgumentParser(description='''Convert a latitude.json file
generated by Google Takeout to a GPX file, suitable for import into Lightroom,
or other geotagging applications. Go to https://www.google.com/takeout/ to
download an archive containing your latitude.json file.''')
parser.add_argument('json_filename', metavar='path/to/latitude.json', type=str, nargs=1,
                    help='A latitude.json file produced by Google Takeout.')
parser.add_argument('--segment_gap', dest='segment_gap', action='store', type=float, default=3,
                    help='the number of hours between data points to trigger generating a new track segment in the output GPX file')
parser.add_argument('--output', dest='output', action='store', default='latitude.gpx',
                    help='the file to store the output in')

args = parser.parse_args()

# Load the location history from the JSON file -- note that the most recent
# locations are first -- at least when I downloaded mine -- so the order 
# must be reversed.
with open(args.json_filename[0], 'rb') as f:
    history = json.load(f)['data']['items'][::-1]

print('Loaded {filename} with {N} locations.'.format(N=len(history),
                                                     filename=args.json_filename[0]))


gpx = GPX()
gpx_track = GPXTrack()
gpx.tracks.append(gpx_track)

last_timestampMs = 0.0
for point in history:
    timestampMs = long(point['timestampMs'])
    if timestampMs - last_timestampMs > (1000 * 3600 * args.segment_gap):
        gpx_segment = GPXTrackSegment()
        gpx_track.segments.append(gpx_segment)
    last_timestampMs = timestampMs

    gpx_point = GPXTrackPoint(point['latitude'], point['longitude'],
            time=datetime.utcfromtimestamp(timestampMs / 1000.0))
    gpx_segment.points.append(gpx_point)

with open(args.output, 'wb') as f:
    f.write(gpx.to_xml())

print('Wrote {} points in {} segments to {}'.format(len(history), len(gpx_track.segments), args.output))
